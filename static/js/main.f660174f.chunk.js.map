{"version":3,"sources":["component/TodoApp/TodoApp.js","component/Header/header.js","component/About/about.js","App.js","serviceWorker.js","index.js"],"names":["TodoApp","state","input","item","onHandle","event","setState","target","value","onItemStorage","preventDefault","onDelete","key","filter","data","index","this","console","log","edit","className","onSubmit","type","onChange","placeholder","map","onClick","Component","header","to","about","style","textAlign","App","path","exact","component","About","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f660174f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class TodoApp extends Component {\r\n\r\n  state={\r\n      input:\"\",\r\n      item:  []\r\n  }\r\n  onHandle=(event)=>{\r\n      this.setState({\r\n          input:event.target.value\r\n      })\r\n\r\n  }\r\n  onItemStorage=(event)=>{\r\n      event.preventDefault()\r\n      const {input}=this.state\r\n      this.setState({\r\n          item:[...this.state.item,input],\r\n          input:\"\"\r\n        })\r\n\r\n  }\r\n  onDelete=(key)=>{\r\n      this.setState({\r\n          item:this.state.item.filter((data,index)=> index!==key)\r\n      })\r\n  }\r\n\r\n\r\n    render() {\r\n        const {input,item }=this.state\r\n        console.log(this.state.edit)\r\n        return (\r\n            <div className=\"todo-container\">\r\n                \r\n                \r\n                <form className=\"input-box\" onSubmit={this.onItemStorage}>\r\n                <h2>Todoapp</h2>\r\n                    <input type=\"text\" value={input} onChange={this.onHandle} placeholder=\"Enter..\" />\r\n                    \r\n\r\n                </form>\r\n                <ul>\r\n                   \r\n                   {item.map((data,index)=>(\r\n                       <li key={index}>\r\n                           {data}<i className=\"far fa-edit\" ></i><i className=\"fas fa-trash-alt\" onClick={()=>this.onDelete(index)} ></i>\r\n                       </li>\r\n                   ))}\r\n                   \r\n                    \r\n                </ul>\r\n    \r\n     \r\n            </div>\r\n                          \r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport './header.css'\r\nimport {Link} from \"react-router-dom\"\r\n\r\nexport default function header() {\r\n    return (\r\n        <header>\r\n            <Link to=\"/\">Home</Link>\r\n            <Link to=\"/about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function about() {\r\n    return (\r\n        <div>\r\n            <h1 style={{textAlign:\"center\"}}>About Component </h1>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport TodoApp from './component/TodoApp/TodoApp';\nimport './component/TodoApp/TodoApp.css'\nimport Header from './component/Header/header'\nimport About from './component/About/about'\nimport {BrowserRouter as Router , Route} from 'react-router-dom'\n\n\nfunction App() {\n  return (\n      <Router>\n        <Header/>\n        <Route path=\"/\" exact component={TodoApp}/>\n        <Route path=\"/About\" component={About}/>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}